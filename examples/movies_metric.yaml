steps:
- dataFrameName: moviesWithRatings
  sql:
    SELECT userid,
           movies.movieid,
           rating,
           timestamp,
           title,
           genres
    FROM ratings
    JOIN movies ON ratings.movieid = movies.movieid
- dataFrameName: fantasyMoviesWithRatings
  sql:
    SELECT movieId,
           cast(rating AS float) AS rating,
           timestamp,
           title,
           genres
    FROM moviesWithRatings
    WHERE genres LIKE '%Fantasy%'
- dataFrameName: topFantasyMovies
  sql:
    SELECT movieId,
           title,
           avg(rating) AS averageRating
    FROM fantasyMoviesWithRatings
    GROUP BY movieId,
             title
    ORDER BY averageRating DESC
    LIMIT 100
- dataFrameName: myFavoriteMovieRated
  sql:
    SELECT *
    FROM topFantasyMovies
    WHERE title = ${myFavoriteMovie}
- dataFrameName: ratingsWithGenre
  sql:
    SELECT explode(split(genres, "\\|")) AS genre,
           trunc(from_unixtime(timestamp), "MONTH") AS month
    FROM moviesWithRatings

- dataFrameName: dramaComediesRatingsPerMonthPerGenre
  sql:
    SELECT unix_timestamp(month) * 1000 AS month_ts,
           genre,
           COUNT(*) AS number_of_ratings
    FROM ratingsWithGenre
    WHERE genre IN("Drama", "Comedy")
    GROUP BY genre,
             month
output:
- dataFrameName: moviesWithRatings
  outputType: Parquet
  outputOptions:
    saveMode: Overwrite
    path: moviesWithRatings.parquet
- dataFrameName: dramaComediesRatingsPerMonthPerGenre
  outputType: Instrumentation
  outputOptions:
    timeColumn: month_ts
    keyColumn: genre