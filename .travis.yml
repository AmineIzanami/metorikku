language: scala
sudo: true
services:
  - docker
jdk:
  - oraclejdk8
branches:
  only:
    - master
    - /^v[\d\.]+$/
env:
  global:
    - SPARK_VERSION=2.4.3
    - HADOOP_VERSION=2.7
    - HIVE_VERSION=1.2.2
    - TARGET_CACHE=$HOME/target-cache/${TRAVIS_COMMIT}
    - DOCKER_CACHE=$HOME/docker-cache/${TRAVIS_COMMIT}
before_script:
  - export -f travis_fold
jobs:
  include:
    - name: "Compile and build docker"
      stage: compile
      script:
        - travis_fold start "assembly"
        - sbt -DsparkVersion=$SPARK_VERSION clean scalastyle assembly "set test in (Test, assembly) := {}" test:assembly || travis_terminate 1;
        - mkdir -p $TARGET_CACHE && cp -r target/scala-2.11/*.jar $TARGET_CACHE
        - travis_fold end "assembly"
        # Create all relevant docker images
        - travis_fold start "docker"
        - docker pull $(grep -ioP '(?<=^from)\s+\S+' docker/spark/Dockerfile)
        - docker pull metorikku/spark:latest
        - docker pull metorikku/metorikku:latest
        - docker build -t metorikku/spark:$SPARK_VERSION --cache-from metorikku/spark:latest -t metorikku/spark:latest --build-arg SPARK_VERSION=$SPARK_VERSION --build-arg HADOOP_VERSION=$HADOOP_VERSION -f docker/spark/Dockerfile docker/spark || travis_terminate 1;
        - docker build -t metorikku/metorikku:latest -f docker/metorikku/Dockerfile . || travis_terminate 1;
        - docker pull $(grep -ioP '(?<=^from)\s+\S+' docker/hive/Dockerfile)
        - docker pull metorikku/hive:latest
        - docker build -t metorikku/hive:$HIVE_VERSION --cache-from metorikku/hive:latest -t metorikku/hive:latest --build-arg HIVE_VERSION=$HIVE_VERSION -f docker/hive/Dockerfile docker/hive || travis_terminate 1;
        - mkdir -p $DOCKER_CACHE
        - docker save metorikku/spark:latest | gzip -c > $DOCKER_CACHE/spark.gz
        - docker save metorikku/metorikku:latest | gzip -c > $DOCKER_CACHE/metorikku.gz
        - docker save metorikku/hive:latest | gzip -c > $DOCKER_CACHE/hive.gz
        - travis_fold end "docker"
      cache:
        directories:
          - $HOME/.ivy2/cache
          - $HOME/.sbt
          - $TARGET_CACHE
          - $DOCKER_CACHE
      before_cache:
        - find $HOME/.sbt -name "*.lock" | xargs rm
        - find $HOME/.ivy2 -name "ivydata-*.properties" | xargs rm
        - rm -f $HOME/.ivy2/.sbt.ivy.lock
    - name: "Main example test"
      stage: test
      before_script: mkdir -p target/scala-2.11 && cp -v $TARGET_CACHE/* target/scala-2.11/
      script:
        - travis_fold start "main_tester_example"
        - java -Dspark.master=local[*] -cp target/scala-2.11/metorikku-standalone.jar com.yotpo.metorikku.MetorikkuTester --test-settings examples/movies_test.yaml || travis_terminate 1;
        - travis_fold end "main_tester_example"
      cache:
        directories:
          - $TARGET_CACHE
    - name: "Kafka example test"
      before_script: mkdir -p target/scala-2.11 && cp -v $TARGET_CACHE/* target/scala-2.11/
      script:
        - travis_fold start "kafka_tester_example"
        - java -Dspark.master=local[*] -cp target/scala-2.11/metorikku-standalone.jar com.yotpo.metorikku.MetorikkuTester --test-settings examples/kafka/kafka2kafka_aggregations_test.yaml || travis_terminate 1;
        - travis_fold end "kafka_tester_example"
      cache:
        directories:
          - $TARGET_CACHE
    - name: "UDF test"
      before_script: mkdir -p target/scala-2.11 && cp -v $TARGET_CACHE/* target/scala-2.11/
      script:
        - travis_fold start "udf_tester_example"
        - (cd examples/udf && sbt package) || travis_terminate 1;
        - "java -Dspark.master=local[*] -cp target/scala-2.11/metorikku-standalone.jar:examples/udf/target/scala-2.11/udf-example_2.11-1.0.jar com.yotpo.metorikku.MetorikkuTester --test-settings examples/udf/udf_test.yaml || travis_terminate 1;"
        - travis_fold end "udf_tester_example"
      cache:
        directories:
          - $TARGET_CACHE
    - name: "Kafka to Kafka E2E"
      before_script: docker load -i $DOCKER_CACHE/spark.gz && docker load -i $DOCKER_CACHE/metorikku.gz
      script:
        - travis_fold start "kafka_to_kafka_e2e"
        - (cd e2e/kafka && ./test.sh) || travis_terminate 1;
        - travis_fold end "kafka_to_kafka_e2e"
      cache:
        directories:
          - $DOCKER_CACHE
    - name: "File to InfluxDB E2E"
      before_script: docker load -i $DOCKER_CACHE/spark.gz && docker load -i $DOCKER_CACHE/metorikku.gz
      script:
        - travis_fold start "file_to_influx_e2e"
        - (cd e2e/influxdb && ./test.sh) || travis_terminate 1;
        - travis_fold end "file_to_influx_e2e"
      cache:
        directories:
          - $DOCKER_CACHE
    - name: "File to hive E2E"
      before_script: docker load -i $DOCKER_CACHE/spark.gz && docker load -i $DOCKER_CACHE/metorikku.gz && docker load -i $DOCKER_CACHE/hive.gz
      script:
        - travis_fold start "file_to_hive_e2e"
        - (cd e2e/hive && ./test.sh) || travis_terminate 1;
        - travis_fold end "file_to_hive_e2e"
      cache:
        directories:
          - $DOCKER_CACHE
    - name: "File to Elasticsearch E2E"
      before_script: docker load -i $DOCKER_CACHE/spark.gz && docker load -i $DOCKER_CACHE/metorikku.gz
      script:
        - travis_fold start "file_to_elasticsearch_e2e"
        - (cd e2e/elasticsearch && ./test.sh) || travis_terminate 1;
        - travis_fold end "file_to_elasticsearch_e2e"
      cache:
        directories:
          - $DOCKER_CACHE
    - name: "File to Hudi E2E"
      before_script: docker load -i $DOCKER_CACHE/spark.gz && docker load -i $DOCKER_CACHE/metorikku.gz && docker load -i $DOCKER_CACHE/hive.gz
      script:
        - travis_fold start "file_to_hudi_e2e"
        - (cd e2e/hudi && ./test.sh) || travis_terminate 1;
        - travis_fold end "file_to_hudi_e2e"
      cache:
        directories:
          - $DOCKER_CACHE
    - name: "CDC E2E"
      before_script: docker load -i $DOCKER_CACHE/spark.gz && docker load -i $DOCKER_CACHE/metorikku.gz && docker load -i $DOCKER_CACHE/hive.gz
      script:
        - travis_fold start "cdc_e2e"
        - (cd e2e/cdc && ./test.sh) || travis_terminate 1;
        - travis_fold end "cdc_e2e"
      cache:
        directories:
          - $DOCKER_CACHE
    - name: "Deploy"
      stage: deploy
      if: tag =~ ^v OR branch = master
      before_deploy: mkdir -p target/scala-2.11 && cp -v $TARGET_CACHE/* target/scala-2.11/ && docker load -i $DOCKER_CACHE/spark.gz && docker load -i $DOCKER_CACHE/metorikku.gz && docker load -i $DOCKER_CACHE/hive.gz
      cache:
        directories:
          - $HOME/.ivy2/cache
          - $HOME/.sbt
          - $TARGET_CACHE
          - $DOCKER_CACHE
      deploy:
        - provider: script
          skip_cleanup: true
          script: sbt publishSigned sonatypeReleaseAll
          on:
            all_branches: true
            condition: ($TRAVIS_BRANCH = master) || ($TRAVIS_TAG =~ ^v.*)
        - provider: script
          skip_cleanup: true
          script: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin && docker tag metorikku/metorikku metorikku/metorikku:"$TRAVIS_TAG"_spark_"$SPARK_VERSION" && docker push metorikku/spark && docker push metorikku/hive && docker push metorikku/metorikku
          on:
            all_branches: true
            condition: $TRAVIS_TAG =~ ^v.*
        - provider: releases
          skip_cleanup: true
          api_key:
            secure: i+W1C7xBogQ5XUxctAV92+YaraEGrHscjnuIkXHesfGEvF5rz9AdwGvpLzRIdLOHH0S4tR5uPFVUF+w86IWQOHLyZhNDybbkIpoQqRRuB0xiOwsqlcjz5IwNkhraTRF+8sPl9FBI5OuGfOKh8jy91xLpYvcMt+EKsai+5rugDxyb8/L3G5nQcH+/5c40dflDmDChkJF/qoNB7iLofMoW9uG72QHKeO87JoVJKg6o73anpuqQ9qZA7W4GYZBmU5QrHNMfdQqt/8XgrPvxq4DW8EnH1Tzg4nXuBREvY92rBxBYpAuff0uxlRJmd8n19Nk4hNRNNpwBIBlHwmbzCAY4AnRJmZT1G/A3E5wznfUt1JekIdwCfaVBbIaAbeFwrTV2DjJYSWdmeB79HF82CYRHuWY4tkxUzUMuBUK2KKFovfMvNG2Lx33cQRwC1YrCb+9W587rWx3dNfIY4vj9aWbCcfZnfrM0N00rlQKZH16dkdYIEZlg396h3v9M41MmvNgez7O/ftUILF3cIc6AG2X8xzcpbXB0lGCFwNdMXKtEpUf04Nw5Lu84Ov662OWfPAM2G/edSnXF1d56XxLnax8dQNcoqc25wcn+1VmpguzLr530rI9dNREZC2sQ7C0/cLnk6SAP12PKXk9nmigyWIbbGHe2FBC4WBSssb8xMg+bgLs=
          file_glob: true
          file: "$TRAVIS_BUILD_DIR/target/scala-2.11/*.jar"
          on:
            all_branches: true
            condition: $TRAVIS_TAG =~ ^v.*
